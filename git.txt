#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_PARTICIPANTS 20
#define MAX_NAME_LEN 32
#define LINE_LEN 256

typedef struct 
{
    char name[MAX_NAME_LEN];
    int muted;
    double speaking_time;   
    int turns;
    time_t start_time;      
}
 Participant;

Participant participants[MAX_PARTICIPANTS];
int participant_count = 0;

int find_participant(const char *name)
 {
    for (int i = 0; i < participant_count; ++i)
        if (strcmp(participants[i].name, name) == 0)
            return i;
    return -1;
}

void add_participant(const char *name)
 {
    if (participant_count >= MAX_PARTICIPANTS) 
{
        printf("Max participants reached.\n");
        return;
    }
    strncpy(participants[participant_count].name, name, MAX_NAME_LEN - 1);
    participants[participant_count].muted = 0;
    participants[participant_count].speaking_time = 0.0;
    participants[participant_count].turns = 0;
    participants[participant_count].start_time = 0;
    participant_count++;
    printf("Added participant: %s\n", name);
}

void print_summary()
 {
    printf("\n--- Session Summary ---\n");
    for (int i = 0; i < participant_count; ++i)
 {
        printf("%s | Turns: %d | Speaking time: %.2f s | %s\n",
            participants[i].name,
            participants[i].turns,
            participants[i].speaking_time,
            participants[i].muted ? "Muted" : "Unmuted");
    }
}

int main()
 {
    char cmd[LINE_LEN];
    printf("Virtual Group Discussion (C Prototype)\n");
    printf("Commands:\n");
    printf("  add <name>          - add participant\n");
    printf("  mute <name>         - mute participant\n");
    printf("  unmute <name>       - unmute participant\n");
    printf("  start <name>        - start speaking\n");
    printf("  stop <name>         - stop speaking\n");
    printf("  speak <name> <text> - type subtitle line\n");
    printf("  summary             - show session summary\n");
    printf("  exit                - end session\n\n");

    while (1) {
        printf("> ");
        if (!fgets(cmd, sizeof(cmd), stdin)) break;
        cmd[strcspn(cmd, "\n")] = 0; 

        if (strncmp(cmd, "add ", 4) == 0)
 {
            add_participant(cmd + 4);
        } 
        else if (strncmp(cmd, "mute ", 5) == 0)
 {
            char *name = cmd + 5;
            int idx = find_participant(name);
            if (idx >= 0) { participants[idx].muted = 1; printf("%s muted.\n", name); 
}
            else printf("Participant not found.\n");
        } 
        else if (strncmp(cmd, "unmute ", 7) == 0) 
{
            char *name = cmd + 7;
            int idx = find_participant(name);
            if (idx >= 0) { participants[idx].muted = 0; printf("%s unmuted.\n", name);
 }
            else printf("Participant not found.\n");
        } 
        else if (strncmp(cmd, "start ", 6) == 0)
 {
            char *name = cmd + 6;
            int idx = find_participant(name);
            if (idx >= 0) {
                if (participants[idx].muted)
 {
                    printf("%s is muted. Unmute to speak.\n", name);
                } else {
                    participants[idx].start_time = time(NULL);
                    participants[idx].turns += 1;
                    printf("%s started speaking.\n", name);
                }
            } else printf("Participant not found.\n");
        } 
        else if (strncmp(cmd, "stop ", 5) == 0) {
            char *name = cmd + 5;
            int idx = find_participant(name);
            if (idx >= 0 && participants[idx].start_time != 0)
 {
                time_t now = time(NULL);
                participants[idx].speaking_time += difftime(now, participants[idx].start_time);
                participants[idx].start_time = 0;
                printf("%s stopped speaking.\n", name);
            } else printf("Participant not found or not speaking.\n");
        } 
        else if (strncmp(cmd, "speak ", 6) == 0) 
{
            char *rest = cmd + 6;
            char name[MAX_NAME_LEN], text[LINE_LEN];
            if (sscanf(rest, "%s %[^\n]", name, text) == 2)
 {
                int idx = find_participant(name);
                if (idx >= 0) {
                    if (participants[idx].muted) printf("%s is muted. Cannot speak.\n", name);
                    else printf("[Subtitle] %s: %s\n", name, text);
                } else printf("Participant not found.\n");
            } else {
                printf("Invalid speak command. Usage: speak <name> <text>\n");
            }
        } 
        else if (strcmp(cmd, "summary") == 0)
 {
            print_summary();
        } 
        else if (strcmp(cmd, "exit") == 0)
 {
            print_summary();
            printf("Exiting.\n");
            break;
        } 
        else {
            printf("Unknown command.\n");
        }
    }

    return 0;
}
